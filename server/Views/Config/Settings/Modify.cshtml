@using InfoScreenPi.Entities
@using System.Linq
@model List<Setting>

@{
    int TickerTimeSec = Convert.ToInt32(@Model.First(s => s.SettingName == "TickerTime").SettingValue)/1000;
}

<!-- Nav tabs -->
<ul class="nav nav-tabs" role="tablist">
    <li role="presentation" class="active"><a href="#screen" aria-controls="screen" role="tab" data-toggle="tab">Scherm</a></li>
    <li role="presentation"><a href="#infobalk" aria-controls="infobalk" role="tab" data-toggle="tab">Infobalk</a></li>
  <li role="presentation"><a href="#prog" aria-controls="prog" role="tab" data-toggle="tab">InfoScreenPi</a></li>
  <li role="presentation"><a href="#network" aria-controls="network" role="tab" data-toggle="tab">Netwerk</a></li>
</ul>
<div class="tab-content">
    <div role="tabpanel" class="tab-pane fade in active" id="screen">
        <form class="form-horizontal" id="SettingsForm">
            <h3 class="col-sm-offset-2">Slides</h3>
            <div class="form-group">
                <label for="DefaultDisplayTime" class="col-sm-2 control-label">Standaard Intervaltijd</label>
                <div class="input-group col-md-5">
                    <input type="number" class="form-control" id="DefaultDisplayTime" value="@Model.First(s => s.SettingName == "DefaultDisplayTime").SettingValue" data-validation="number required">
                    <span class="input-group-addon">seconden</span>
                </div>
            </div>
            <hr/>
            <h3 class="col-sm-offset-2">Klok Slide</h3>
            <div class="form-group">
                <label for="ShowTicker" class="col-sm-2 control-label">Toon Slide</label>
                <div class="input-group col-md-5">
                    @{
                        ClockItem klok = ViewBag.ClockSlide;
                        string check = "";
                        if (klok.Active){ check = "checked"; }
                    }
                    <input type="checkbox" id="ClockSlideActive" class="ClockSlideShow" @check data-toggle="toggle" data-style="ios" data-size="small" data-on="Toon" data-off="Verberg" data-onstyle="success" data-offstyle="danger">
                </div>
            </div>
            <div class="form-group">
                <label for="TickerTime" class="col-sm-2 control-label">Intervaltijd</label>
                <div class="input-group col-md-5">
                    <input type="number" class="form-control" id="ClockSlideInterval" value="@klok.DisplayTime" data-validation="number required">
                    <span class="input-group-addon">seconden</span>
                </div>
            </div>
            <hr/>
            <h3 class="col-sm-offset-2">Weer Slide</h3>
            <div class="form-group">
                <label for="TickerTime" class="col-sm-2 control-label">Toon Slide</label>
                <div class="input-group col-md-5">
                    @{
                        WeatherItem weather = ViewBag.WeatherSlide;
                        string checkW = "";
                        if (weather.Active){ checkW = "checked"; }
                    }
                    <input type="checkbox" id="WeatherSlideActive" class="WeatherSlideActive" @checkW data-toggle="toggle" data-style="ios" data-size="small" data-on="Toon" data-off="Verberg" data-onstyle="success" data-offstyle="danger">
                </div>
            </div>
            <div class="form-group">
                <label for="TickerTime" class="col-sm-2 control-label">Intervaltijd</label>
                <div class="input-group col-md-5">
                    <input type="number" class="form-control" id="WeatherSlideInterval" value="@weather.DisplayTime" data-validation="number required">
                    <span class="input-group-addon">seconden</span>
                </div>
            </div>
            <div class="form-group">
                <label for="TickerTime" class="col-sm-2 control-label">Locatie</label>
                <div class="input-group col-md-5">
                    <input type="text" class="form-control" id="WeatherSlideLocation" value='@Model.First(s => s.SettingName == "WeatherLocation").SettingValue' data-validation="required"></div>
            </div>
            <hr/>
            <div class="form-group">
                <div class="col-md-5"><br>
                    <button class="btn btn-primary" id="SaveSettings" >Opslaan</button>
                </div>
            </div>
        </form>
    </div>
    <div role="tabpanel" class="tab-pane fade" id="infobalk">
    <form class="form-horizontal" id="InfoSettings">
      <h3 class="col-sm-offset-2">Ticker</h3>
      <div class="form-group">
        <label for="ShowTicker" class="col-sm-2 control-label">Toon Ticker</label>
        <div class="input-group col-md-5">
          <input type="checkbox" id="ShowTicker" class="ShowTicker" checked data-toggle="toggle" data-style="ios" data-size="small" data-on="Toon" data-off="Verberg" data-onstyle="success" data-offstyle="danger">
        </div>
      </div>
      <div class="form-group">
        <label for="TickerTime" class="col-sm-2 control-label">Ticker Intervaltijd</label>
        <div class="input-group col-md-5">
            <input type="number" class="form-control" id="TickerTime" value="@TickerTimeSec" data-validation="number required">
            <span class="input-group-addon">seconden</span>
        </div>
      </div>
      <div class="form-group">
        <label for="TickerTime" class="col-sm-2 control-label">Ticker Effect</label>
        <div class="input-group col-md-5">
            @if(@Model.First(s => s.SettingName == "TickerEffect").SettingValue == "fade")
            { 
                <select class="form-control" id="TickerEffect">
                    <option value="fade" selected="selected">Fade</option>
                    <option value="slide" >Slide</option>
                    <option value="typing" >Typing</option>
                </select>
            }
            else if(@Model.First(s => s.SettingName == "TickerEffect").SettingValue == "slide")
            {
                  <select class="form-control" id="TickerEffect">
                    <option value="fade">Fade</option>
                    <option value="slide" selected="selected" >Slide</option>
                    <option value="typing" >Typing</option>
                </select>
            }
            else
            {
                <select class="form-control" id="TickerEffect">
                    <option value="fade">Fade</option>
                    <option value="slide" >Slide</option>
                    <option value="typing" selected="selected">Typing</option>
                </select>
            }
        </div>
      </div>
      <hr/>
      <h3 class="col-sm-offset-2">Klok</h3>
      <div class="form-group">
        <label for="TickerTime" class="col-sm-2 control-label">Toon</label>
        <div class="form-group">
          <div class="input-group col-md-5">
            <input type="checkbox" id="ShowClock" class="ShowClock" checked data-toggle="toggle" data-style="ios" data-size="small" data-on="Toon" data-off="Verberg" data-onstyle="success" data-offstyle="danger">
          </div>
        </div>
      </div>
      <hr/>
      <h3 class="col-sm-offset-2">Weer</h3>
      <div class="form-group">
        <label for="TickerTime" class="col-sm-2 control-label">Toon</label>
        <div class="input-group col-md-5">
            <input type="checkbox" id="ShowWeather" class="ShowTicker" checked data-toggle="toggle" data-style="ios" data-size="small" data-on="Toon" data-off="Verberg" data-onstyle="success" data-offstyle="danger">
        </div>
      </div>
      <div class="form-group">
        <label for="TickerTime" class="col-sm-2 control-label">Locatie</label>
        <div class="input-group col-md-5">
            <input type="text" class="form-control" id="WeatherLocation" value='@Model.First(s => s.SettingName == "WeatherLocation").SettingValue' data-validation="required"></div>
      </div>
      <hr/>
      <div class="form-group">
        <div class="col-md-5"><br>
          <button class="btn btn-primary" >Opslaan</button>
        </div>
      </div>
    </form>
  </div>
  <div role="tabpanel" class="tab-pane fade" id="prog">
    <form class="form-horizontal" id="ProgSettingsForm">
      <h3 class="col-sm-offset-1">Gegevens</h3>
      @{
        //string titel = @Model.First(s => s.SettingName == "SlideTime").SettingValue)/1000;
      }
      <div class="form-group">
        <label for="Title" class="col-sm-2 control-label">Titel</label>
        <div class="input-group col-md-5">
          <input type="text" class="form-control" id="site-title" value='@Model.First(s => s.SettingName == "Title").SettingValue'  data-validation="required"></div>
      </div>
      <div class="form-group">
        <label for="Logo" class="col-sm-2 control-label">Logo</label>
        <div class="input-group col-md-5">
          <label class="input-group-btn">
            <span class="btn btn-primary">
              Browse &hellip; <input type="file" class="upload" name="logoup" id="f_UploadLogo" style="display: none;" accept="image/*">
            </span>
          </label>
          <input type="text" class="form-control" placeholder="Upload nieuw logo" id="placeholderUploadLogo" readonly>
        </div>
        <div class="col-md-5 col-sm-offset-2">
          <div id="logoUploadPreview"></div><center><span id="logoUrlSpan">@Model.First(s => s.SettingName == "LogoUrl").SettingValue </span></center><br />
        </div>
      </div>
      <hr/>
      <h3 class="col-sm-offset-1">Gebruikers</h3>
      <div class="form-group">
        <div class="col-md-9 col-sm-offset-1">
          <table class="table table-striped" id="userTable">
            <tr>
              <th>
                Gebruikersnaam
              </th>
              <th>
                Naam & E-mail
              </th>
              <th>
                Laatste login
              </th>
              <th></th>
              <th></th>
            </tr>
            <div id="userTabBody">
              @foreach (User u in ViewBag.Users)
              {
                <tr>
                  <td>@u.Username</td>
                  <td>@u.FirstName @u.LastName <br/> <i>@u.Email</i></td>
                  <td>
                    @{
                      if(u.LastLogin.ToString().Equals("1/1/01 12:00:00 AM")){
                        <text>Nog niet ingelogd.</text>
                      }
                      else{
                        <text>@u.LastLogin</text>
                      }
                    }
                  </td>
                  <td>
                    @{
                      if(u.UserRoles.First().Role.Name.Equals("Admin")){
                        <span class="glyphicon glyphicon-wrench" aria-hidden="true" data-toggle="tooltip" data-placement="right" title="Administrator"></span>
                      }
                    }
                  </td>
                  <td><span class="glyphicon glyphicon-trash spanLink deleteUser" aria-hidden="true" id="@u.Id"></span></td>
                </tr>
              }
            </div>
          
          </table>
          <div class="panel panel-default">
            <div class="panel-body">
              <button class="btn btn-default center" id="showRegisterUser">Voeg gebruiker toe</button>
              <div id="registerPane">

              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="form-group">
        <div class="col-md-5"><br>
          <button class="btn btn-primary" id="SaveProgSettings" >Opslaan</button>
        </div>
      </div>
    </form>
  </div>
  <div role="tabpanel" class="tab-pane fade" id="network">
  @await Html.PartialAsync("~/Views/Config/Settings/Network.cshtml", (List<Device>)ViewBag.Devices)
  </div>
</div>


<script>
    $.validate({
        form : '#SettingsForm',
        onError : function($form) {
            //alert('Validation of form '+$form.attr('id')+' failed!');
        },
        onSuccess : function($form) {
            //alert('The form '+$form.attr('id')+' is valid!');

            var postData = {
                 slideTime: $("#DefaultDisplayTime").val(), 
                 clockSlideActive: Boolean($("#ClockSlideActive").is(":checked")), 
                 clockSlideInterval: $("#ClockSlideInterval").val(), 
                 weatherSlideActive: Boolean($("#WeatherSlideActive").is(":checked")), 
                 weatherSlideInterval: $("#WeatherSlideInterval").val(), 
                 weatherSlideLocation: $("#WeatherSlideLocation").val()
            };

            
            $.ajax({
                type: "POST",
                url: document.baseURI + 'Config/SaveSettingsScreen',
                data: postData,
                success: function (response, textStatus, jqXHR) {
                    
                    if (response.success) {
                        //modal.close();
                        alertify.success(response.message);
                    }
                    else {
                        alertify.error(response.message);
                    }
                },
                dataType: "json",
                traditional: true
            });
            
            return false;
        }
    });
    $.validate({
        form : '#InfoSettings',
        onError : function($form) {
            alert('Validation of form '+$form.attr('id')+' failed!');
        },
        onSuccess : function($form) {
            //alert('The form '+$form.attr('id')+' is valid!');
            
            var parameters = new Object();

            $("#InfoSettings :input").each(function (index, item) {
                var input = $(this);

                if (input.is(":button")) {
                }
                else {
                    //if (input.attr('type')=='number'){
                    if (input[0].id == 'TickerTime') {
                        parameters[input[0].id] = String(parseInt(input[0].value) * 1000);
                    }
                    else if (input.is(':checkbox')) {
                        if (input.is(":checked")) parameters[input[0].id] = 'true';
                        else parameters[input[0].id] = 'false';
                    }
                    else parameters[input[0].id] = input[0].value;
                }
            });
            console.log(parameters);

            $.ajax({
                type: "POST",
                url: document.baseURI + 'Config/SaveSettingsInfobalk',
                data: parameters,
                success: function (response, textStatus, jqXHR) {
                   
                    if (response.success) {
                        //modal.close();
                        alertify.success(response.message);
                    }
                    else {
                        alertify.error(response.message);
                    }
                },
                dataType: "json",
                traditional: true
            });
            
            return false;
        }
    });
    
    $('input:checkbox').each(function () {
        $(this).bootstrapToggle();
    });

    $("#f_UploadLogo").on('change', function () {
    
        var label = $(this).val().replace(/\\/g, '/').replace(/.*\//, '');
        var input = $(this).parents('.input-group').find(':text');

        if( input.length ) {
            input.val(label);
            $("#logoUrlSpan").html(label);
        } else {
            if( label ) alert(log);
        }

        var file;
        if ((file = this.files[0])) {
            var logUrl = URL.createObjectURL(file);
            show_logo(logUrl);
        }
    });
    

    function show_logo(url){
        var image = $('<img />', {
            id: 'prevLogo',
            src: url,
            style: "margin-top: 25px; margin-left: auto; margin-right: auto; width: 200px; display: block;"
        });
        $("#logoUploadPreview").html(image);

    }

    show_logo("images/logo/@Model.First(s => s.SettingName == "LogoUrl").SettingValue")

    $("#showRegisterUser").click(function(e) {
        e.preventDefault();
        
        $.get( document.baseURI + "Config/CreateUserView", function( data ) {
            $( "#registerPane" ).html( data );
            $('#showRegisterUser').hide();
        });
    });

    $('.deleteUser').click(function(){
        var curRow = $(this).closest('tr');
        var userid = $(this).attr('id');
        var userUN = curRow.find('td:first').text();
        var postData = { userId: userid };
        
        alertify.confirm("Bent u zeker dat u gebruiker " + userUN + " wilt verwijderen?", function (e) {
            
            if (e) {
                $.ajax({
                    type: "POST",
                    url: document.baseURI + "Config/DeleteUser",
                    data: postData,
                    success: function(response)
                    {
                        if(response.success) {
                            curRow.remove();
                        }
                        else{
                            alertify.error(response.message);
                        }
                    }
                });
            } else {
                // user clicked "cancel"
            }
        });
      
    });

    $.validate({
        form: '#ProgSettingsForm',
        onError: function($form) {
            //alert('Validation of form '+$form.attr('id')+' failed!');
        },
        onSuccess: function($form) {
            //alert('The form '+$form.attr('id')+' is valid!');
            var frm = $("#ProgSettingsForm");
            var title = frm.find("#site-title").val();

            var data = new FormData();
            data.append('logo', frm.find("#f_UploadLogo")[0].files[0]);
            data.append('title', title);

            $.ajax({
                type: 'post',
                url: document.baseURI + 'Config/SaveProgSettings',
                data: data,
                processData: false,
                contentType: false,
                success: function (response, textStatus, jqXHR) {
                    if(response.success) {
                        //modal.close();
                    
                        $("#progTitle").html("<b>" + title + "</b>");
                        $("#progLogo").attr('src', 'images/logo/' + $("#logoUrlSpan").text());

                        alertify.success(response.message);
                    }
                    else{
                        alertify.error(response.message);
                    }
                },
                error: function () {
                    alert("Whoops something went wrong!");
                }
            });

            return false;
        }
    });
    
//    $("#SaveProgSettings").click(function(e) {
//        e.preventDefault();
//
//        var frm = $("#ProgSettingsForm");
//        var title = frm.find("#site-title").val();
//
//        var data = new FormData();
//        data.append('logo', frm.find("#f_UploadLogo")[0].files[0]);
//        data.append('title', title);
//
//        $.ajax({
//            type: 'post',
//            url: '/Config/SaveProgSettings',
//            data: data,
//            processData: false,
//            contentType: false,
//            success: function (response, textStatus, jqXHR) {
//                if(response.success) {
//                    modal.close();
//                    
//                    $("#progTitle").html("<b>" + title + "</b>");
//                    $("#progLogo").attr('src', 'images/logo/' + $("#logoUrlSpan").text());
//
//                    alertify.success(response.message);
//                }
//                else{
//                    alertify.error(response.message);
//                }
//            },
//            error: function () {
//                alert("Whoops something went wrong!");
//            }
//        });
//
//    });

</script>